/* Generated By:JJTree&JavaCC: Do not edit this line. AnansiConstants.java */
package javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnansiConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int OR = 10;
  /** RegularExpression Id. */
  int NOT = 11;
  /** RegularExpression Id. */
  int ASSIGNMENT = 12;
  /** RegularExpression Id. */
  int ASSIGNMENT_PLUS = 13;
  /** RegularExpression Id. */
  int ASSIGNMENT_MINUS = 14;
  /** RegularExpression Id. */
  int ASSIGNMENT_MULTIPLY = 15;
  /** RegularExpression Id. */
  int ASSIGNMENT_DIVIDE = 16;
  /** RegularExpression Id. */
  int GT = 17;
  /** RegularExpression Id. */
  int LT = 18;
  /** RegularExpression Id. */
  int GE = 19;
  /** RegularExpression Id. */
  int LE = 20;
  /** RegularExpression Id. */
  int EQ = 21;
  /** RegularExpression Id. */
  int NEQ = 22;
  /** RegularExpression Id. */
  int INT = 23;
  /** RegularExpression Id. */
  int CHAR = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int SWITCH = 27;
  /** RegularExpression Id. */
  int CASE = 28;
  /** RegularExpression Id. */
  int BREAK = 29;
  /** RegularExpression Id. */
  int FOR = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int VOID = 32;
  /** RegularExpression Id. */
  int RETURN = 33;
  /** RegularExpression Id. */
  int DEFAULTT = 34;
  /** RegularExpression Id. */
  int L_PAREN = 35;
  /** RegularExpression Id. */
  int R_PAREN = 36;
  /** RegularExpression Id. */
  int L_CHAV = 37;
  /** RegularExpression Id. */
  int R_CHAV = 38;
  /** RegularExpression Id. */
  int L_COLC = 39;
  /** RegularExpression Id. */
  int R_COLC = 40;
  /** RegularExpression Id. */
  int PONT_VIRG = 41;
  /** RegularExpression Id. */
  int TWO_PONT = 42;
  /** RegularExpression Id. */
  int VIRG = 43;
  /** RegularExpression Id. */
  int INT_CONSTANT = 44;
  /** RegularExpression Id. */
  int CHAR_CONSTANT = 45;
  /** RegularExpression Id. */
  int NULL_CONSTANT = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int CARACTERES = 48;
  /** RegularExpression Id. */
  int IDENT = 49;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 50;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"int\"",
    "\"char\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"break\"",
    "\"for\"",
    "\"while\"",
    "\"void\"",
    "\"return\"",
    "\"default\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "<INT_CONSTANT>",
    "<CHAR_CONSTANT>",
    "\"null\"",
    "<DIGIT>",
    "<CARACTERES>",
    "<IDENT>",
    "<INVALID_LEXICAL>",
  };

}
