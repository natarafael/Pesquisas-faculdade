/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javacc;

import java.io.FileOutputStream;
import java.io.IOException;

public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  public Token k;
  public String value1, value2;
  protected Anansi parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Anansi p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public int jjtGetId() {
	  return id;
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(String value) { this.value1 = value; }
  public Object jjtGetValue() { return value1; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return AnansiTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix, FileOutputStream fileOut) {
	
	String a = (toString(prefix) + "\n");
	byte[] content = a.getBytes();
	System.out.print(a);
		
	try {
		if (children != null) {
		      for (int i = 0; i < children.length; ++i) {
		        SimpleNode n = (SimpleNode)children[i];
		        if (n != null) {
		          n.dump(prefix + " ", fileOut);
		        }
		      }
		    }
		fileOut.write(content);
	} catch (IOException e) {

		e.printStackTrace();
	}
 
  }
}

/* JavaCC - OriginalChecksum=3680790f94c40698479b3c1183bf9ccc (do not edit this line) */
