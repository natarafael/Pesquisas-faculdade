/* Generated By:JJTree&JavaCC: Do not edit this line. Anansi.java */
package javacc;
import java.io.*;
import sintatic.recovery.*;
import semantica.*;
import java.io.FileOutputStream;
import java.io.IOException;

public class Anansi/*@bgen(jjtree)*/implements AnansiTreeConstants, AnansiConstants {/*@bgen(jjtree)*/
  protected JJTAnansiState jjtree = new JJTAnansiState();
  int contParseError = 0;

  boolean debug_recovery;

  public static void main(String args []) throws ParseException
  {
    boolean debug_as = false;
    boolean debug_recovery = false;

    String filename = "";
    String arvore_arquivo = "arquivo_";

    Anansi parser;
    int i;
    boolean ms = false;

    for ( i = 0; i < args.length-1; i++) {
                if(args[i].equals("-debug_AS")) {
                  debug_as = true;
                  break;
                }else {
                  System.out.println("Usage is: " + "java SubLing_C [-degub_AS] inputfile");
                  System.exit(0);
                }
    }

        if(args[i].equals("-")) {
                 System.out.println("Reading from standard input...");
                 parser = new Anansi(System.in); //cria o analisador sint�tico

        }else {

           filename = args[args.length-1];
           System.out.println("Reading from file " + filename + ". . .");

           try {
             parser = new Anansi(new java.io.FileInputStream(filename));

           } catch (java.io.FileNotFoundException e) {
             System.out.println("File " + filename + " not found.");
             return;
           }catch (IOException e) {
             System.out.println("Erro ao abrir o aquivo." + e.getMessage());
             return;
           }
         }

        parser.debug_recovery = debug_recovery;
        if(!debug_as) parser.disable_tracing();

        SimpleNode root = null;

        try {
                root = parser.program();
        }
        catch(ParseException e) {
                System.err.println(e.getMessage());
        }

        arvore_arquivo += filename;
        FileOutputStream fileOut = null;

        try {
                fileOut = new FileOutputStream(arvore_arquivo);
        }
        catch(Exception e) {
                System.err.println(e.getMessage());
        }
    SimpleNode print = root;
        print.dump(filename, fileOut); //imprime a arvore no arquivo

        SemanticRun parseSem = new SemanticRun();

        try {
                parseSem.programCheck(root);
        }
        catch(SemanticException e) {
                System.out.println(e.getMessage());
        }

        finally {
          System.out.println(parser.token_source.foundLexError() + " Lexical Errors found");
          System.out.println(parser.contParseError + " Syntactic Errors found");
          if(parseSem.getFoundSemanticError() == 0) System.out.println("0 Semantic Errors found");
        }
  }//main

  static public String im  (int x) {
    int k;
    String s;

    s = tokenImage[x];
    k = s.lastIndexOf("\u005c"");

    try { s = s.substring(1,k); }
    catch (StringIndexOutOfBoundsException e) { }
    return s;
  }

  boolean eof;

 void consumeUntil(RecoverySet g, ParseException e, String met) throws /*/*ParseEOFException*/ ParseException{
        Token tok;
                if(debug_recovery){
                        System.out.println();
                        System.out.println("*** " + met+ "***");
                        System.out.println("\u0009Syncronizing Set: " + g);
                }
                if(g == null) throw e;

                tok = getToken(1);
                while(!eof){
                        if(g.contains(tok.kind)) {
                                if(debug_recovery){
                                        System.out.println("\u0009found Syncronizing token: " + im(tok.kind));
                                        break;
                                }
                        }
                        if(debug_recovery){
                                        System.out.println("\u0009ignoring token: " + im(tok.kind));
                        }
                        getNextToken();
                        tok = getToken(1);
                        if(tok.kind == EOF && !g.contains(EOF)) eof = true;
                }
                System.out.println(e.getMessage());
                contParseError++;

 }

  final public SimpleNode program() throws ParseException {
    trace_call("program");
    try {
                                 /*@bgen(jjtree) PROGRAMA */
        SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet g = First.program;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
          jj_consume_token(0);
          break;
        case INT:
        case CHAR:
        case VOID:
        case IDENT:
          functlist(g);
          try {
            jj_consume_token(0);
          } catch (ParseException e) {
                consumeUntil(g, e, "program");
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 0:
          case INT:
          case CHAR:
          case VOID:
          case IDENT:
            program();
            break;
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
      } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("program");
    }
  }

  final public void functlist(RecoverySet g) throws ParseException {
    trace_call("functlist");
    try {
                                            /*@bgen(jjtree) FUNCT_LIST */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNCT_LIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet f = First.functlist.union(g);
      try {
        functdecl(f);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case CHAR:
        case VOID:
        case IDENT:
          functlist(g);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("functlist");
    }
  }

  final public void functdecl(RecoverySet g) throws ParseException {
    trace_call("functdecl");
    try {
                                            /*@bgen(jjtree) FUNCT_DECL */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNCT_DECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);       //assinatura da fun��o
        RecoverySet f = new RecoverySet (R_PAREN);
        RecoverySet h = new RecoverySet (IDENT);
        Token t;
      try {
        try {
          functype(h);
          t = jj_consume_token(IDENT);
          jj_consume_token(L_PAREN);
          paramlist(f);
          jj_consume_token(R_PAREN);
          jj_consume_token(L_COLC);
          functbody(g);
          jj_consume_token(R_COLC);
                  jjtn000.value1 = t.image;
        } catch (ParseException e) {
          consumeUntil(g, e, "functdecl");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("functdecl");
    }
  }

  final public void paramlist(RecoverySet g) throws ParseException {
    trace_call("paramlist");
    try {
                                            /*@bgen(jjtree) PARAM_LIST */
        SimpleNode jjtn000 = new SimpleNode(JJTPARAM_LIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);       // lista de parametros
        RecoverySet f = new RecoverySet (IDENT);
        Token t1 = null, t2 = null;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
          case CHAR:
          case VOID:
          case IDENT:
            functype(f);
            t1 = jj_consume_token(IDENT);
            label_1:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case L_CHAV:
                ;
                break;
              default:
                jj_la1[3] = jj_gen;
                break label_1;
              }
              jj_consume_token(L_CHAV);
              jj_consume_token(R_CHAV);
            }
            label_2:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case VIRG:
                ;
                break;
              default:
                jj_la1[4] = jj_gen;
                break label_2;
              }
              jj_consume_token(VIRG);
              functype(f);
              t2 = jj_consume_token(IDENT);
              label_3:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case L_CHAV:
                  ;
                  break;
                default:
                  jj_la1[5] = jj_gen;
                  break label_3;
                }
                jj_consume_token(L_CHAV);
                jj_consume_token(R_CHAV);
              }
            }
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          if(t1 != null) {
                jjtn000.value1 = t1.image;
                if(t2 != null) jjtn000.value2 = t2.image;
                }
        } catch (ParseException e) {
    consumeUntil(g, e, "paramlist");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("paramlist");
    }
  }

  final public void varlist(RecoverySet g) throws ParseException {
    trace_call("varlist");
    try {
                                        /*@bgen(jjtree) VAR_LIST */
        SimpleNode jjtn000 = new SimpleNode(JJTVAR_LIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);   //declara��o de variavel
        Token tipo, nome;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID:
            tipo = jj_consume_token(VOID);
            break;
          case INT:
            tipo = jj_consume_token(INT);
            break;
          case CHAR:
            tipo = jj_consume_token(CHAR);
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          nome = jj_consume_token(IDENT);
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case L_CHAV:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_4;
            }
            jj_consume_token(L_CHAV);
            label_5:
            while (true) {
              jj_consume_token(INT_CONSTANT);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INT_CONSTANT:
                ;
                break;
              default:
                jj_la1[9] = jj_gen;
                break label_5;
              }
            }
            jj_consume_token(R_CHAV);
          }
          jjtn000.value1 = tipo.image;
          jjtn000.value2 = nome.image;
        } catch (ParseException e) {
     consumeUntil (g, e, "varlist");
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("varlist");
    }
  }

  final public void functype(RecoverySet g) throws ParseException {
    trace_call("functype");
    try {
 /*@bgen(jjtree) FUNCT_TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCT_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tipo;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID:
            tipo = jj_consume_token(VOID);
            break;
          case INT:
            tipo = jj_consume_token(INT);
            break;
          case CHAR:
            tipo = jj_consume_token(CHAR);
            break;
          case IDENT:
            tipo = jj_consume_token(IDENT);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jjtn000.value1 = tipo.image;
        } catch (ParseException e) {
   consumeUntil (g, e, "functype");
        }
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("functype");
    }
  }

  final public void functbody(RecoverySet g) throws ParseException {
    trace_call("functbody");
    try {
                                            /*@bgen(jjtree) FUNCT_BODY */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNCT_BODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet f = new RecoverySet(PONT_VIRG);
      try {
        try {
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
            case CHAR:
            case IF:
            case SWITCH:
            case BREAK:
            case FOR:
            case WHILE:
            case VOID:
            case RETURN:
            case IDENT:
              ;
              break;
            default:
              jj_la1[11] = jj_gen;
              break label_6;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
            case CHAR:
            case VOID:
              varlist(f);
              jj_consume_token(PONT_VIRG);
              break;
            case IF:
              comand_if(g);
              break;
            case SWITCH:
              comand_switch(g);
              break;
            case FOR:
              comand_for(g);
              break;
            case WHILE:
              comand_while(g);
              break;
            case IDENT:
              atrib(f);
              jj_consume_token(PONT_VIRG);
              break;
            case BREAK:
              jj_consume_token(BREAK);
              jj_consume_token(PONT_VIRG);
              break;
            case RETURN:
              Return(f);
              jj_consume_token(PONT_VIRG);
              break;
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } catch (ParseException e) {
                consumeUntil (g, e, "functbody");
        }
      } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
      } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
      }
    } finally {
      trace_return("functbody");
    }
  }

  final public void Return(RecoverySet g) throws ParseException {
    trace_call("Return");
    try {
                                      /*@bgen(jjtree) RETURN */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        try {
          jj_consume_token(RETURN);
          expressao(g);
        } catch (ParseException e) {
   consumeUntil (g, e, "Return");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Return");
    }
  }

  final public void comand_if(RecoverySet g) throws ParseException {
    trace_call("comand_if");
    try {
                                    /*@bgen(jjtree) IF */
        SimpleNode jjtn000 = new SimpleNode(JJTIF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet f1 = new RecoverySet(R_PAREN), f2 = new RecoverySet(ELSE).union(g);
      try {
        try {
          jj_consume_token(IF);
          jj_consume_token(L_PAREN);
          expressao(f1);
          jj_consume_token(R_PAREN);
          jj_consume_token(L_COLC);
          functbody(f2);
          jj_consume_token(R_COLC);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            jj_consume_token(ELSE);
            jj_consume_token(L_COLC);
            functbody(g);
            jj_consume_token(R_COLC);
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
        } catch (ParseException e) {
        consumeUntil(g, e, "comand_if");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("comand_if");
    }
  }

  final public void comand_switch(RecoverySet g) throws ParseException {
    trace_call("comand_switch");
    try {
                                            /*@bgen(jjtree) SWITCH */
        SimpleNode jjtn000 = new SimpleNode(JJTSWITCH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet f = new RecoverySet(PONT_VIRG);
        Token t;
      try {
        try {
          jj_consume_token(SWITCH);
          jj_consume_token(L_PAREN);
          t = jj_consume_token(IDENT);
          jj_consume_token(R_PAREN);
          jj_consume_token(L_COLC);
          label_7:
          while (true) {
            jj_consume_token(CASE);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT_CONSTANT:
              jj_consume_token(INT_CONSTANT);
              break;
            case CHAR_CONSTANT:
              jj_consume_token(CHAR_CONSTANT);
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(TWO_PONT);
            label_8:
            while (true) {
              atrib(f);
              jj_consume_token(PONT_VIRG);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENT:
                ;
                break;
              default:
                jj_la1[15] = jj_gen;
                break label_8;
              }
            }
            jj_consume_token(BREAK);
            jj_consume_token(PONT_VIRG);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CASE:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_7;
            }
          }
          jj_consume_token(DEFAULTT);
          jj_consume_token(TWO_PONT);
          label_9:
          while (true) {
            atrib(f);
            jj_consume_token(PONT_VIRG);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENT:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_9;
            }
          }
          jj_consume_token(R_COLC);
            jjtn000.value1 = t.image;
        } catch (ParseException e) {
          consumeUntil(g, e, "comand_switch");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("comand_switch");
    }
  }

  final public void comand_for(RecoverySet g) throws ParseException {
    trace_call("comand_for");
    try {
                                       /*@bgen(jjtree) FOR */
        SimpleNode jjtn000 = new SimpleNode(JJTFOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet f1 = new RecoverySet(PONT_VIRG), f2 = new RecoverySet(R_COLC);
      try {
        try {
          jj_consume_token(FOR);
          jj_consume_token(L_PAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            atrib(f1);
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          jj_consume_token(PONT_VIRG);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case MINUS:
          case NOT:
          case L_PAREN:
          case INT_CONSTANT:
          case CHAR_CONSTANT:
          case NULL_CONSTANT:
          case IDENT:
            expressao(f1);
            break;
          default:
            jj_la1[19] = jj_gen;
            ;
          }
          jj_consume_token(PONT_VIRG);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            atrib(f2);
            break;
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          jj_consume_token(R_PAREN);
          jj_consume_token(L_COLC);
          functbody(g);
          jj_consume_token(R_COLC);
        } catch (ParseException e) {
          consumeUntil(g, e, "comand_for");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("comand_for");
    }
  }

  final public void comand_while(RecoverySet g) throws ParseException {
    trace_call("comand_while");
    try {
                                          /*@bgen(jjtree) WHILE */
        SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);RecoverySet f = new RecoverySet(R_PAREN);
      try {
        try {
          jj_consume_token(WHILE);
          jj_consume_token(L_PAREN);
          expressao(f);
          jj_consume_token(R_PAREN);
          jj_consume_token(L_COLC);
          functbody(g);
          jj_consume_token(R_COLC);
        } catch (ParseException e) {
                consumeUntil(g, e, "comand_while");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("comand_while");
    }
  }

  final public void atrib(RecoverySet g) throws ParseException {
    trace_call("atrib");
    try {
                                        /*@bgen(jjtree) ATRIBUICAO */
        SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = null;
        Token op = null;
      try {
        try {
          t = jj_consume_token(IDENT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGNMENT:
            op = jj_consume_token(ASSIGNMENT);
            break;
          case ASSIGNMENT_PLUS:
            op = jj_consume_token(ASSIGNMENT_PLUS);
            break;
          case ASSIGNMENT_MINUS:
            op = jj_consume_token(ASSIGNMENT_MINUS);
            break;
          case ASSIGNMENT_MULTIPLY:
            op = jj_consume_token(ASSIGNMENT_MULTIPLY);
            break;
          case ASSIGNMENT_DIVIDE:
            op = jj_consume_token(ASSIGNMENT_DIVIDE);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          expressao(g);
                if(t != null) jjtn000.value1 = t.image;
                if(op != null) jjtn000.k = op;
        } catch (ParseException e) {
          consumeUntil(g, e, "atrib");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("atrib");
    }
  }

  final public void expressao(RecoverySet g) throws ParseException {
    trace_call("expressao");
    try {
                                           /*@bgen(jjtree) EXPRESSAO */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
      try {
        try {
          numexpr();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
          case OR:
          case GT:
          case LT:
          case GE:
          case LE:
          case EQ:
          case NEQ:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LT:
              op = jj_consume_token(LT);
              break;
            case GT:
              op = jj_consume_token(GT);
              break;
            case LE:
              op = jj_consume_token(LE);
              break;
            case GE:
              op = jj_consume_token(GE);
              break;
            case EQ:
              op = jj_consume_token(EQ);
              break;
            case NEQ:
              op = jj_consume_token(NEQ);
              break;
            case AND:
              op = jj_consume_token(AND);
              break;
            case OR:
              op = jj_consume_token(OR);
              break;
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            numexpr();
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
                if(op != null)
                        jjtn000.k = op;
        } catch (ParseException e) {
          consumeUntil(g, e, "expressao");
        }
      } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("expressao");
    }
  }

  final public void numexpr() throws ParseException {
    trace_call("numexpr");
    try {
                                   /*@bgen(jjtree) NUMERO_EXPRESSAO */
        SimpleNode jjtn000 = new SimpleNode(JJTNUMERO_EXPRESSAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
      try {
        term();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case MINUS:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_10;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            op = jj_consume_token(PLUS);
            break;
          case MINUS:
            op = jj_consume_token(MINUS);
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          term();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if(op != null)
                        jjtn000.value1 = op.image;
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("numexpr");
    }
  }

  final public void term() throws ParseException {
    trace_call("term");
    try {
                     /*@bgen(jjtree) TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token op = null;
      try {
        unaryexpr();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MULTIPLY:
          case DIVIDE:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_11;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MULTIPLY:
            op = jj_consume_token(MULTIPLY);
            break;
          case DIVIDE:
            op = jj_consume_token(DIVIDE);
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          unaryexpr();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if(op != null) jjtn000.value1 = op.image;
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("term");
    }
  }

  final public void unaryexpr() throws ParseException {
    trace_call("unaryexpr");
    try {
                               /*@bgen(jjtree) UNARY_EXPR */
        SimpleNode jjtn000 = new SimpleNode(JJTUNARY_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            op = jj_consume_token(PLUS);
            break;
          case MINUS:
            op = jj_consume_token(MINUS);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        factor();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if(op != null) jjtn000.k = op;
                else jjtn000.value1 = "None";
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public void factor() throws ParseException {
    trace_call("factor");
    try {
                        /*@bgen(jjtree) FACTOR */
        SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token not = null, op = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          not = jj_consume_token(NOT);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_CONSTANT:
          op = jj_consume_token(INT_CONSTANT);
          break;
        case CHAR_CONSTANT:
          op = jj_consume_token(CHAR_CONSTANT);
          break;
        case NULL_CONSTANT:
          op = jj_consume_token(NULL_CONSTANT);
          break;
        case IDENT:
          op = jj_consume_token(IDENT);
          break;
        case L_PAREN:
          op = jj_consume_token(L_PAREN);
          expressao(null);
          jj_consume_token(R_PAREN);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if(not != null) jjtn000.value1 = not.image;
          else jjtn000.value1 = "None";
          if(op != null) {
                jjtn000.k = op;
         }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("factor");
    }
  }

  /** Generated Token Manager. */
  public AnansiTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800001,0x1800001,0x1800000,0x0,0x0,0x0,0x1800000,0x1800000,0x0,0x0,0x1800000,0xeb800000,0xeb800000,0x4000000,0x0,0x0,0x10000000,0x0,0x0,0x860,0x0,0x1f000,0x7e0600,0x7e0600,0x60,0x60,0x180,0x180,0x60,0x60,0x800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20001,0x20001,0x20001,0x20,0x800,0x20,0x20001,0x1,0x20,0x1000,0x20001,0x20003,0x20003,0x0,0x3000,0x20000,0x0,0x20000,0x20000,0x27008,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x27008,};
   }

  /** Constructor with InputStream. */
  public Anansi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Anansi(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnansiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Anansi(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnansiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Anansi(AnansiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnansiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
